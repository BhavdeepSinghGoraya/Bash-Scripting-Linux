#!/bin/bash

# Function to handle error
err() {
	echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
	exit 1
}  

# Funtion that hepls the user 
function display_help {
printf "NAME\n"
printf "\t$(basename $0) - used to delete the files\n"
printf "SYNOPSIS\n"
printf "\t$(basename $0) [ options ] file...\n"
printf "OPTIONS\n"
printf "\t-s, --silent\n"
printf "\t\tThis option deletes the file without updating the information to the log\n"
printf "\t-h, --help\n"
printf "\t\tThis option is used to provide the user help for using the command\n"
printf "USAGE\n"
printf "\t\t$(basename $0) file1 file2\n"
printf "\t\t$(basename $0) -s file1\n"
}

# Parse command line arguments using getopts
while getopts ":sh" opt; do
    case ${opt} in
        s ) silent=true;;
        h ) display_help
            exit 0;;
        ? ) echo "Invalid option: -$OPTARG" 1>&2
             display_help
             exit 1;;
        : ) echo "Option -$OPTARG requires an argument" 1>&2
            display_help
            exit 1;;
    esac
done
shift $((OPTIND -1))

#Function that creates a Log File and writes the information of deleted file in it
LOG_FILE="$HOME/.remove_log"
function log_file {
 if [[ ! -f "$LOG_FILE" ]]; then
	touch "$LOG_FILE" 
 fi 
 echo "$(date): $(whoami): $1" >> "$LOG_FILE"
}
# Function that deletes the file
function delete_file {
for file in "$@"; do
	# Checking if the file exists
	if [[ -e $file ]]; then
	     # Checking for silent option 
             if [[ "$silent" == true ]]; then 
	       # Removing file without writing to log 
	       rm $file
            else 
	       # Removing file and writing it to log
	       rm $file && log_file $file 
	fi

else 
    err " ERROR: $file Doesn't exist"
fi
done 
}
delete_file $@

